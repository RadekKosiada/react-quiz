{"version":3,"sources":["components/restartButton.js","components/gameOverPopup.js","components/youWonPopup.js","components/timer.js","App.js","serviceWorker.js","index.js"],"names":["RestartButton","props","react_default","a","createElement","className","onClick","restartGamePopup","GameOverPopup","valueFromApp","timeApp","correctAnswer","restartGameApp","YouWonPopup","scoreFromApp","Timer","id","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allQuestions","category","questionId","question","questionValue","value","score","currentRoundPoints","errorMessage","round","showGameOverPopup","showYouWonPopup","time","winCondition","answeredQuestions","handleChange","bind","assertThisInitialized","handleSubmit","restartGame","getQuestion","displayYouWonPopup","countTime","_this2","axios","get","then","res","data","setState","console","log","i","length","answer","catch","err","clearInterval","interval","event","target","currentQuestion","preventDefault","replace","toLowerCase","includes","_this3","setInterval","alert","title","onSubmit","type","name","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ba124e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.scss\";\r\n\r\nexport default function RestartButton(props) {\r\n  return (\r\n    <div>\r\n      <button className=\"button\" onClick={props.restartGamePopup}>\r\n        Restart\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RestartButton from \"./restartButton\";\r\nimport \"../App.scss\";\r\n\r\nexport default function GameOverPopup(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" />\r\n      <div className=\"game-over\">\r\n        <h4>Game Over</h4>\r\n        {props.valueFromApp && (\r\n          <p>\r\n            <span className=\"title answer\">{props.valueFromApp}</span> is wrong!\r\n          </p>\r\n        )}\r\n        {props.timeApp === 0 && (\r\n          <p>\r\n            <span className=\"title\">{props.valueFromApp}</span>Too late!\r\n          </p>\r\n        )}\r\n        <p>\r\n          The correct answer is:<br />\r\n          <span className=\"title\">{props.correctAnswer}</span>\r\n        </p>\r\n        <RestartButton restartGamePopup={props.restartGameApp} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RestartButton from \"./restartButton\";\r\nimport \"../App.scss\";\r\n\r\nexport default function YouWonPopup(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"overlay\" />\r\n      <div className=\"game-over\">\r\n        <h4>Congrats, you Won!</h4>\r\n        <p>Your score counts {props.scoreFromApp}</p>\r\n        <RestartButton restartGamePopup={props.restartGameApp} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../App.scss\";\r\n\r\nexport default function Timer(props) {\r\n  return (\r\n    <div id=\"timer-container\">\r\n      <div id=\"timer\">\r\n        {/* if time has only one digit */}\r\n        {props.timeApp < 10 && (\r\n          <p className=\"time\">00:0{props.timeApp}</p>\r\n        )}\r\n        {/* if time has two digits */}\r\n        {props.timeApp >= 10 && (\r\n          <p className=\"time\">00:{props.timeApp}</p>\r\n        )}\r\n        <p className=\"time-label\">seconds left</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// Ctrl Shift F\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.scss\";\r\nimport GameOverPopup from \"./components/gameOverPopup\";\r\nimport YouWonPopup from \"./components/youWonPopup\";\r\nimport Timer from \"./components/timer\";\r\nimport { isRegExp } from \"util\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allQuestions: [],\r\n      correctAnswer: \"\",\r\n      category: \"\",\r\n      questionId: 0,\r\n      question: \"\",\r\n      questionValue: 0,\r\n      value: \"\",\r\n      score: 0,\r\n      currentRoundPoints: 1,\r\n      errorMessage: \"\",\r\n      round: 1,\r\n      showGameOverPopup: false,\r\n      showYouWonPopup: false,\r\n      time: 60,\r\n      winCondition: 5,\r\n      answeredQuestions: 0\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.getQuestion = this.getQuestion.bind(this);\r\n    this.displayYouWonPopup = this.displayYouWonPopup.bind(this);\r\n    this.countTime = this.countTime.bind(this);\r\n  }\r\n  componentWillMount() {\r\n    this.countTime();\r\n    this.getQuestion();\r\n  }\r\n  getQuestion() {\r\n    axios\r\n      .get(\"http://jservice.io/api/random/?count=\" + this.state.winCondition)\r\n      .then(res => {\r\n        //needs to change this to render\r\n        const data = res.data;\r\n        this.setState({\r\n          allQuestions: data\r\n        });\r\n        console.log(this.state.correctAnswer);\r\n        for (let i = 0; i < data.length; i++) {\r\n          console.log(data[i].answer);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  restartGame() {\r\n    console.log(\"fired\");\r\n    this.setState({\r\n      showGameOverPopup: false,\r\n      showYouWonPopup: false,\r\n      round: 1,\r\n      score: 0,\r\n      value: \"\",\r\n      time: 60,\r\n      currentRoundPoints: 1,\r\n      answeredQuestions: 0,\r\n      errorMessage: \"\"\r\n    });\r\n    this.getQuestion();\r\n    this.countTime();\r\n  }\r\n  displayYouWonPopup() {\r\n    this.setState({\r\n      showYouWonPopup: true\r\n    });\r\n    clearInterval(this.interval);\r\n  }\r\n  handleChange(event) {\r\n    this.setState({ \r\n      value: event.target.value,\r\n      errorMessage: \"\"\r\n     });\r\n  }\r\n  handleSubmit(event) {\r\n    console.log(this.state.allQuestions, this.state.round);\r\n    const currentQuestion = this.state.allQuestions[this.state.round - 1];\r\n    console.log(\"A name was submitted: \" + this.state.value);\r\n    event.preventDefault();\r\n    //if no answer\r\n    if (!this.state.value) {\r\n      this.setState({\r\n        errorMessage: \"*This is a required field\"\r\n      });\r\n      //if correct answer\r\n    } else if (\r\n      currentQuestion.answer\r\n        .replace(/(<([^>]+)>)/ig,\"\")\r\n        .toLowerCase()\r\n        .includes(this.state.value.toLowerCase())\r\n    ) {\r\n      console.log(\"correct\", this.state.answeredQuestions);\r\n      this.setState({\r\n        currentRoundPoints: this.state.currentRoundPoints * 2,\r\n        round: this.state.round + 1,\r\n        errorMessage: \"\",\r\n        answeredQuestions: this.state.answeredQuestions + 1,\r\n        time: 60\r\n      });\r\n      if (this.state.score === 0) {\r\n        this.setState({\r\n          score: +1\r\n        });\r\n      } else {\r\n        this.setState({\r\n          score: 2 * this.state.score\r\n        });\r\n      }\r\n      //triggering popup after correctly answering required number of questions\r\n      if (this.state.round === this.state.winCondition) {\r\n        this.displayYouWonPopup();\r\n      }\r\n      this.setState({\r\n        value: \"\"\r\n      });\r\n      //  resetting all to 0 if wrong answer\r\n    } else {\r\n      this.setState({\r\n        score: 0,\r\n        round: this.state.round,\r\n        showGameOverPopup: true,\r\n        errorMessage: \"\",\r\n        answeredQuestions: 0\r\n      });\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n  countTime() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({\r\n        time: this.state.time - 1\r\n      });\r\n      if (this.state.time === 0) {\r\n        clearInterval(this.interval);\r\n        this.setState({\r\n          showGameOverPopup: true\r\n        });\r\n      }\r\n    }, 1000);\r\n  }\r\n  render() {\r\n    const currentQuestion = this.state.allQuestions[this.state.round - 1];\r\n    let alert = '';\r\n    if (this.state.errorMessage) {\r\n      alert = 'input-alert';\r\n    }\r\n\r\n    // if (currentQuestion) {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"main-container\">\r\n         \r\n          <div className=\"quiz-container\">\r\n            <h1>Quiz*</h1>\r\n            <div className=\"questions-container\">\r\n              <p className=\"title\">Round: </p>\r\n              <p>{this.state.round}</p>\r\n\r\n              <p className=\"title\">Points for the current round: </p>\r\n              <p className=\"current-points\">{this.state.currentRoundPoints}</p>\r\n\r\n              <p className=\"title\">Questions left to win: </p>\r\n              <p>{this.state.winCondition - this.state.answeredQuestions}</p>\r\n\r\n              <p className=\"title\">Your score: </p>\r\n              <p>{this.state.score}</p>\r\n\r\n              <p className=\"title\">Category: </p>\r\n              {currentQuestion && <p>{currentQuestion.category.title}</p>}\r\n\r\n              <p className=\"title\">Question: </p>\r\n              {currentQuestion && <p>{currentQuestion.question}</p>}\r\n            </div>\r\n            <p className=\"error-message\">{this.state.errorMessage}</p>\r\n            {/* <Question getQuestions={this.getQuestions} /> */}\r\n            <form className=\"grid-form\" onSubmit={this.handleSubmit}>\r\n              <span className=\"title\">Your answer:</span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"answer\"\r\n                className={alert}\r\n                value={this.state.value}\r\n                onChange={this.handleChange}\r\n              />\r\n              <input className=\"button\" type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n          </div>\r\n          <Timer timeApp={this.state.time} />\r\n        </div>\r\n\r\n        {this.state.showGameOverPopup && (\r\n          <GameOverPopup\r\n            restartGameApp={this.restartGame}\r\n            valueFromApp={this.state.value}\r\n            correctAnswer={currentQuestion.answer.replace(/(<([^>]+)>)/ig,\"\")}\r\n            timeApp={this.state.time}\r\n          />\r\n        )}\r\n\r\n        {this.state.showYouWonPopup && (\r\n          <YouWonPopup\r\n            restartGameApp={this.restartGame}\r\n            scoreFromApp={this.state.score}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n    // } else {\r\n    //   return (\r\n    //     <div>Loading....\r\n    //     <Question getQuestions={this.getQuestions} />\r\n    //     </div>\r\n    //   )\r\n\r\n    // }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}